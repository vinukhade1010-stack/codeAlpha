<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Playlist Music Player - CodeAlpha</title>
<style>
  :root{
    --bg1:#0f1221;
    --bg2:#1a2040;
    --card:rgba(255,255,255,.06);
    --text:#eef1ff;
    --muted:#aab0d6;
    --accent:#6c8bff;
    --accent-2:#00c851;
    --danger:#ff4b4b;
    --shadow: 0 10px 30px rgba(0,0,0,.35);
    --radius:18px;
  }
  *{box-sizing:border-box}
  body{
    margin:0;
    font-family: system-ui, -apple-system, "Poppins", Segoe UI, Roboto, Ubuntu, Cantarell, "Helvetica Neue", Arial, "Noto Sans", "Apple Color Emoji", "Segoe UI Emoji";
    color:var(--text);
    background: radial-gradient(1200px 900px at 10% 10%, #1b2250 0%, #0b0e1a 60%),
                linear-gradient(135deg, var(--bg1), var(--bg2));
    min-height:100vh;
    display:flex;
    align-items:center;
    justify-content:center;
    padding:20px;
  }

  .app{
    width:min(1050px, 95vw);
    background:var(--card);
    border:1px solid rgba(255,255,255,.08);
    border-radius: var(--radius);
    backdrop-filter: blur(14px);
    box-shadow:var(--shadow);
    overflow:hidden;
    display:grid;
    grid-template-columns: 360px 1fr;  /* cover / playlist */
    gap:0;
  }

  /* Left panel (art + big controls) */
  .left{
    padding:24px;
    background: linear-gradient(180deg, rgba(255,255,255,.08), rgba(255,255,255,.02));
    display:flex; flex-direction:column; gap:18px;
  }
  .cover{
    width:100%; aspect-ratio:1/1; border-radius:16px; overflow:hidden;
    box-shadow: 0 16px 40px rgba(0,0,0,.5);
  }
  .cover img{ width:100%; height:100%; object-fit:cover; display:block; }
  .meta h2{margin:0 0 6px; font-size:1.4rem; letter-spacing:.3px;}
  .meta p{margin:0; color:var(--muted)}
  .big-controls{
    display:flex; align-items:center; gap:12px; margin-top:8px;
  }
  .btn{
    border:0; color:#fff; background:#2a2f57; padding:10px 14px; border-radius:12px;
    cursor:pointer; transition:transform .12s ease, background .2s ease, box-shadow .2s ease;
  }
  .btn:hover{ transform:translateY(-2px); background:#32407a; box-shadow:0 8px 20px rgba(0,0,0,.25);}
  .btn.primary{ background:var(--accent); font-weight:700; }
  .btn.success{ background:var(--accent-2); }
  .btn.ghost{ background:transparent; border:1px solid rgba(255,255,255,.15); }

  .progress{
    width:100%; height:10px; background:rgba(255,255,255,.12);
    border-radius:999px; overflow:hidden; cursor:pointer; margin:10px 0 4px;
  }
  .bar{ height:100%; width:0%; background:linear-gradient(90deg, var(--accent), #9aa8ff); }

  .time{
    display:flex; justify-content:space-between; font-size:.85rem; color:var(--muted);
  }

  .volume{
    margin-top:8px; display:flex; align-items:center; gap:10px; color:var(--muted);
  }
  .volume input[type="range"]{ width:100%; accent-color: var(--accent); }

  /* Right panel (playlist) */
  .right{
    padding:20px 20px 10px;
    display:flex; flex-direction:column; gap:14px;
  }
  .topbar{
    display:flex; align-items:center; gap:12px;
  }
  .search{
    position:relative; flex:1;
  }
  .search input{
    width:100%; padding:12px 14px 12px 40px; border-radius:12px; border:1px solid rgba(255,255,255,.12);
    background:rgba(255,255,255,.06); color:var(--text); outline:none;
  }
  .search svg{ position:absolute; left:12px; top:50%; transform:translateY(-50%); opacity:.8 }
  .count{ color:var(--muted); font-size:.9rem; }

  .list{
    border-top:1px solid rgba(255,255,255,.08);
    margin-top:6px; padding-top:6px;
    overflow:auto; max-height:520px;
  }
  .row{
    display:grid;
    grid-template-columns: 52px 1fr 90px 36px 36px;
    gap:14px; align-items:center;
    padding:10px 8px; border-radius:12px; cursor:pointer;
    transition: background .15s ease;
  }
  .row:hover{ background:rgba(255,255,255,.06); }
  .row.active{ background:rgba(108,139,255,.15); outline:1px solid rgba(108,139,255,.35); }
  .thumb{
    width:52px; height:52px; border-radius:10px; overflow:hidden; box-shadow:0 8px 18px rgba(0,0,0,.25);
  }
  .thumb img{width:100%; height:100%; object-fit:cover;}
  .title{ font-weight:600; }
  .artist{ color:var(--muted); font-size:.92rem; }
  .dur{ color:var(--muted); text-align:right; }
  .row .icon-btn{
    width:36px; height:36px; display:grid; place-items:center; border-radius:10px; border:1px solid rgba(255,255,255,.15);
    background:transparent; color:#fff;
  }
  .row .icon-btn.play{ background:var(--accent); border-color:transparent; }
  .row .icon-btn.heart.active{ background:var(--danger); border-color:transparent; }

  /* Responsive */
  @media (max-width: 860px){
    .app{ grid-template-columns: 1fr; }
    .left{ order:2 }
    .right{ order:1 }
  }
</style>
</head>
<body>
  <div class="app">
    <!-- LEFT: Big player -->
    <section class="left">
      <div class="cover"><img id="cover" src="https://picsum.photos/id/1025/800/800" alt="cover"></div>
      <div class="meta">
        <h2 id="title">‚Äî</h2>
        <p id="artist">‚Äî</p>
      </div>

      <div class="big-controls">
        <button class="btn ghost" id="prev">‚èÆ</button>
        <button class="btn primary" id="play">‚ñ∂</button>
        <button class="btn ghost" id="next">‚è≠</button>
        <button class="btn" id="shuffle" title="Shuffle">üîÄ</button>
        <button class="btn" id="repeat" title="Repeat">üîÅ</button>
      </div>

      <div class="progress" id="progress">
        <div class="bar" id="bar"></div>
      </div>
      <div class="time">
        <span id="current">0:00</span>
        <span id="duration">0:00</span>
      </div>

      <div class="volume">
        <span>üîä</span>
        <input type="range" id="vol" min="0" max="1" step="0.01" value="1">
      </div>

      <audio id="audio"></audio>
    </section>

    <!-- RIGHT: Playlist -->
    <section class="right">
      <div class="topbar">
        <div class="search">
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none"><path d="M21 21l-4.3-4.3M10.5 18a7.5 7.5 0 1 1 0-15 7.5 7.5 0 0 1 0 15Z" stroke="currentColor" stroke-width="2" stroke-linecap="round"/></svg>
          <input id="search" placeholder="Search in playlist‚Ä¶" />
        </div>
        <div class="count" id="count">0 tracks</div>
      </div>

      <div class="list" id="list"><!-- rows injected by JS --></div>
    </section>
  </div>

<script>
  // ====== Data (covers via Picsum; audio via SoundHelix) ======
  const songs = [
    { title:"Dream Drive", artist:"Sample Artist",  src:"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3", cover:"https://picsum.photos/id/1025/300/300", dur:"‚Äî" },
    { title:"Midnight City", artist:"Nova Echo",    src:"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-2.mp3", cover:"https://picsum.photos/id/1005/300/300", dur:"‚Äî" },
    { title:"Aurora Skies",  artist:"Luna Waves",   src:"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-3.mp3", cover:"https://picsum.photos/id/1011/300/300", dur:"‚Äî" },
    { title:"Neon Trails",   artist:"Retro Pulse",  src:"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-4.mp3", cover:"https://picsum.photos/id/1027/300/300", dur:"‚Äî" },
    { title:"Velvet Dawn",   artist:"Aria Bloom",   src:"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-5.mp3", cover:"https://picsum.photos/id/1035/300/300", dur:"‚Äî" },
    { title:"Night Runner",  artist:"City Lights",  src:"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-6.mp3", cover:"https://picsum.photos/id/1040/300/300", dur:"‚Äî" },
  ];

  // ====== Elements ======
  const audio    = document.getElementById("audio");
  const coverEl  = document.getElementById("cover");
  const titleEl  = document.getElementById("title");
  const artistEl = document.getElementById("artist");
  const bar      = document.getElementById("bar");
  const progress = document.getElementById("progress");
  const curTime  = document.getElementById("current");
  const durTime  = document.getElementById("duration");
  const playBtn  = document.getElementById("play");
  const prevBtn  = document.getElementById("prev");
  const nextBtn  = document.getElementById("next");
  const vol      = document.getElementById("vol");
  const listEl   = document.getElementById("list");
  const countEl  = document.getElementById("count");
  const searchEl = document.getElementById("search");
  const shuffleBtn = document.getElementById("shuffle");
  const repeatBtn  = document.getElementById("repeat");

  let index = 0;
  let isShuffle = false;
  let isRepeat  = false;

  // ====== Helpers ======
  const fmt = s => {
    if (!Number.isFinite(s)) return "0:00";
    const m = Math.floor(s/60);
    const sec = Math.floor(s%60).toString().padStart(2,"0");
    return `${m}:${sec}`;
  };

  function load(i){
    index = (i+filtered.length)%filtered.length;
    const song = filtered[index];
    audio.src = song.src;
    coverEl.src = song.cover;
    titleEl.textContent = song.title;
    artistEl.textContent = song.artist;
    updateActiveRow();
  }

  function play(){ audio.play(); playBtn.textContent="‚è∏"; }
  function pause(){ audio.pause(); playBtn.textContent="‚ñ∂"; }
  playBtn.onclick = () => (audio.paused ? play() : pause());
  prevBtn.onclick = () => { step(-1); };
  nextBtn.onclick = () => { step(1); };

  function step(dir){
    if(isShuffle){
      index = Math.floor(Math.random()*filtered.length);
    }else{
      index = (index + dir + filtered.length)%filtered.length;
    }
    load(index); play();
  }

  // ====== Progress / Time ======
  audio.addEventListener("timeupdate", () => {
    bar.style.width = `${(audio.currentTime / (audio.duration||1))*100}%`;
    curTime.textContent = fmt(audio.currentTime);
    durTime.textContent = fmt(audio.duration);
  });

  progress.addEventListener("click", (e) => {
    const rect = progress.getBoundingClientRect();
    const pos = (e.clientX - rect.left) / rect.width;
    audio.currentTime = pos * (audio.duration || 0);
  });

  // ====== Volume ======
  vol.addEventListener("input", (e)=> audio.volume = e.target.value);

  // ====== Autoplay next / repeat ======
  audio.addEventListener("ended", () => {
    if(isRepeat){ audio.currentTime = 0; play(); return; }
    step(1);
  });

  // ====== Build playlist rows ======
  function rowTemplate(song, i){
    return `
      <div class="row" data-i="${i}">
        <div class="thumb"><img src="${song.cover}" alt=""></div>
        <div>
          <div class="title">${song.title}</div>
          <div class="artist">${song.artist}</div>
        </div>
        <div class="dur" id="dur-${i}">${song.dur}</div>
        <button class="icon-btn play" title="Play" data-play="${i}">‚ñ∂</button>
        <button class="icon-btn heart" title="Like" data-like="${i}">‚ô•</button>
      </div>`;
  }

  let filtered = [...songs];

  function renderList(){
    countEl.textContent = `${filtered.length} track${filtered.length>1?'s':''}`;
    listEl.innerHTML = filtered.map((s,i)=>rowTemplate(s,i)).join("");
  }

  function updateActiveRow(){
    [...listEl.querySelectorAll(".row")].forEach(r => r.classList.remove("active"));
    const active = listEl.querySelector(`.row[data-i="${index}"]`);
    if(active) active.classList.add("active");
  }

  // click in playlist
  listEl.addEventListener("click", (e)=>{
    const playRow = e.target.closest("[data-play]");
    const likeBtn = e.target.closest("[data-like]");
    const row = e.target.closest(".row");

    if(playRow){
      const i = Number(playRow.dataset.play);
      load(i); play();
    }else if(likeBtn){
      likeBtn.classList.toggle("active");
    }else if(row){
      const i = Number(row.dataset.i);
      load(i); play();
    }
  });

  // ====== Search filter ======
  searchEl.addEventListener("input", ()=>{
    const q = searchEl.value.trim().toLowerCase();
    filtered = songs.filter(s =>
      s.title.toLowerCase().includes(q) || s.artist.toLowerCase().includes(q)
    );
    renderList();
    load(0); pause(); // reset selection on new filter
  });

  // ====== Shuffle / Repeat toggles ======
  shuffleBtn.addEventListener("click", ()=>{
    isShuffle = !isShuffle;
    shuffleBtn.style.background = isShuffle ? "var(--accent-2)" : "";
  });
  repeatBtn.addEventListener("click", ()=>{
    isRepeat = !isRepeat;
    repeatBtn.style.background = isRepeat ? "var(--accent-2)" : "";
  });

  // ====== Preload durations for rows ======
  function preloadDurations(){
    songs.forEach((s,i)=>{
      const a = new Audio();
      a.src = s.src;
      a.addEventListener("loadedmetadata", ()=>{
        const d = fmt(a.duration);
        s.dur = d;
        const dEl = document.getElementById(`dur-${i}`);
        if(dEl) dEl.textContent = d;
      });
    });
  }

  // Init
  renderList();
  load(0);
  preloadDurations();
</script>
</body>
</html>
